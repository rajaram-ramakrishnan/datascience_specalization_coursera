setwd("F:/Knowledge/R Projects/datascience_specalization_coursera/08_Practical_Machine_Learning/Project/data")
list.files()
train_in <- read.csv("pml-training.csv")
valid_in <- read.csv("pml-testing.csv")
dim(train_in)
dim(valid_in)
View(train_in)
NAvar <- sapply(train_in, function(x) { mean(is.na(x))}) > 0.90
NAvar
count(NAvar)
NAvar== TRUE
table(NAvar)
NAvar <- sapply(train_in, function(x) { mean(is.na(x))}) > 0.95
table(NAvar)
train_in <- train_in[, NAvar==FALSE]
valid_in <- valid_in[, NAvar==FALSE]
dim(train_in)
dim(valid_in)
View(train_in)
names(train_in)
train_in <- read.csv("pml-training.csv")
View(train_in)
valid_in <- read.csv("pml-testing.csv")
NAvar <- sapply(train_in, function(x) { mean(is.na(x))}) > 0.90
train_in <- train_in[, NAvar==FALSE]
valid_in <- valid_in[, NAvar==FALSE]
train_in <- train_in[, -c(1:7)]
valid_in <- valid_in[, -c(1:7)]
NZV <- nearZeroVar(train_in)
## further cleaning of variables that are Near zero variance
library(caret)
NZV <- nearZeroVar(train_in)
train_in <- train_in[, -NZV]
valid_in <- valid_in[, -NZV]
str(train_in)
levels(train_in$classe)
View(train_in)
View(train_in)
set.seed(1278)
inTrain <- createDataPartition(train_in$classe, p=0.7, list=FALSE)
training <- train_in[inTrain]
training <- train_in[inTrain,]
testing <-  train_in[-inTrain]
testing <-  train_in[-inTrain,]
## correlations
cor_mat <- cor(training[,-53])
cor_mat
## correlations
which(names(training)=="classe")
cor_mat <- cor(training[ , -53 , training$classe])
cor_mat <- cor(training[ , -53] , training$classe)
cor_mat <- cor(training[ , -53] , as.numeric(training$classe))
cor_mat
bestCorrelations <- subset(as.data.frame(as.table(cor_mat)), abs(Freq)>0.3)
bestCorrelations
bestCorrelations <- subset(as.data.frame(as.table(cor_mat)), abs(Freq)>0.25)
bestCorrelations
## correlations
classe_ind <- which(names(training)=="classe")
cor_mat <- cor(training[ , -classe_ind] , as.numeric(training$classe))
bestCorrelations <- subset(as.data.frame(as.table(cor_mat)), abs(Freq)>0.25)
bestCorrelations
library(Rmisc)
install.packages("Rmisc", lib="C:/Program Files/R/R-3.6.3/library")
library(Rmisc)
library(ggplot2)
p1 <- ggplot(training, aes(classe,pitch_forearm)) +
geom_boxplot(aes(fill=classe))
p2 <- ggplot(training, aes(classe, magnet_belt_y)) +
geom_boxplot(aes(fill=classe))
p3 <- ggplot(training, aes(classe,magnet_arm_x)) +
geom_boxplot(aes(fill=classe))
p4 <- ggplot(training, aes(classe,magnet_arm_y)) +
geom_boxplot(aes(fill=classe))
multiplot(p1,p2,p3,p4,cols=2)
DTModel <- train(classe ~ . ,data = training, method="rpart")
library(rattle)
fancyRpartPlot(DTModel)
fancyRpartPlot(DTModel$finalModel)
predictDT <- predict(DTModel,newdata = testing)
cmDT <- confusionMatrix(predictDT, testing$classe)
cmDT
DTModel <- rpart(classe ~ ., data=training, method="class")
install.packages("rpart", lib="C:/Program Files/R/R-3.6.3/library")
DTModel <- rpart(classe ~ ., data=training, method="class")
library(rpart)
DTModel <- rpart(classe ~ ., data=training, method="class")
library(rattle)
fancyRpartPlot(DTModel$finalModel)
fancyRpartPlot(DTModel)
predictDT <- predict(DTModel,newdata = testing)
cmDT <- confusionMatrix(predictDT, testing$classe)
cmDT <- confusionMatrix(predictDT, testing$classe)
predictDT <- predict(DTModel,newdata = testing,type="class")
cmDT <- confusionMatrix(predictDT, testing$classe)
## further cleaning of variables that are Near zero variance
library(caret)
cmDT <- confusionMatrix(predictDT, testing$classe)
cmDT
set.seed(12345)
library(rpart)
DTModel <- rpart(classe ~ ., data=training, method="class")
library(rattle)
fancyRpartPlot(DTModel)
predictDT <- predict(DTModel,newdata = testing,type="class")
cmDT <- confusionMatrix(predictDT, testing$classe)
cmDT
modFit <- train(classe ~ .,method="rpart",data=training)
fancyRpartPlot(modFit$finalModel)
trControl <- trainControl(method="cv", number = 5, allowParallel = TRUE)
modFit <- train(classe ~ .,method="rpart",data=training,trControl = trControl)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
set.seed(12345)
library(rpart)
DTModel <- rpart(classe ~ ., data=training, method="class")
library(rattle)
fancyRpartPlot(DTModel)
predictDT <- predict(DTModel,newdata = testing,type="class")
cmDT <- confusionMatrix(predictDT, testing$classe)
cmDT
plot(cmDT$table, col = cmDT$byClass,
main = paste("Decision Tree - Accuracy =", round(cmDT$overall['Accuracy'], 4)))
cmDT$table
cmDT$byClass
controlRF <- trainControl(method="cv", number=5, verboseIter=FALSE)
RFModel <- train(classe ~ ., data=training, method="rf", trControl=controlRF)
RFModel$finalModel
predictRF <- predict(RFModel,newdata = testing)
cmRF <- confusionMatrix(predictRF, testing$classe)
cmRF
plot(RFModel)
plot(cmRF$table, col = cmRF$byClass, main = paste("Random Forest Confusion Matrix: Accuracy =", round(cmRF$overall['Accuracy'], 4)))
set.seed(12345)
controlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
GBMModel  <- train(classe ~ ., data=training, method = "gbm", trControl = controlGBM, verbose = FALSE)
GBMModel$finalModel
print(GBMModel)
predictGBM <- predict(GBMModel,newdata = testing)
cmGBM <- confusionMatrix(predictGBM, testing$classe)
cmGBM
## perform PCA
pca_preprocess <- preProcess(training[,-classe_ind], method="pca",thresh=0.99)
pca_preprocess
training.pca <- predict(pca_preprocess, training[,-classe_ind])
testing.pca <- predict(pca_preprocess, testing[,-classe_ind])
## Decision Trees
set.seed(12345)
library(rpart)
DTModel <- rpart(classe ~ ., data=training.pca, method="class")
View(testing.pca)
View(testing)
DTModel <- rpart(training$classe ~ ., data=training.pca, method="class")
fancyRpartPlot(DTModel)
predictDT <- predict(DTModel,newdata = testing,type="class")
DTModel
DTModel <- rpart(classe ~ ., data=training, method="class")
library(rattle)
fancyRpartPlot(DTModel)
predictDT <- predict(DTModel,newdata = testing,type="class")
cmDT <- confusionMatrix(predictDT, testing$classe)
cmDT
plot(cmGBM$table, col = cmGBM$byClass, main = paste("Gradient Boosted Confusion Matrix: Accuracy =", round(cmGBM$overall['Accuracy'], 4)))
Results <- predict(RFModel, newdata=valid_in)
Results
controlRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
RFModel <- train(classe ~ ., data=training, method="rf", trControl=controlRF)
RFModel$finalModel
predictRF <- predict(RFModel,newdata = testing)
cmRF <- confusionMatrix(predictRF, testing$classe)
cmRF
View(valid_in)
valid_in <- read.csv("pml-testing.csv")
View(valid_in)
valid_in <- valid_in[, NAvar==FALSE]
View(valid_in)
View(valid_in)
valid_in <- valid_in[, -c(1:7)]
View(valid_in)
valid_in <- valid_in[, -NZV]
View(valid_in)
ValidationRes <- data.frame(problem_id = valid_in$problem_id, predicted = Results)
ValidationRes
